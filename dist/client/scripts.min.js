/*!
 * Piecemeal
 * 
 * 
 * @author Punnett Square
 * @version 0.0.0
 * Copyright . ISC licensed.
 */
angular.module('Piecemeal', ['ui.router', 'ngMessages'])
.constant('_', window._)
.run(function($rootScope) {
	$rootScope._ = window._;
});
  // .config(function($locationProvider) {
  //   $locationProvider.html5Mode(true);
  // });

(function() {
  'use strict';

  angular.module('Piecemeal')
    .config(config);

  config.$inject = ['$stateProvider', '$urlRouterProvider'];

  function config($stateProvider, $urlRouterProvider) {
    var usernameCache = {};

    var getInfoOnRefresh = function($http) {
      if (!usernameCache[window.sessionStorage.user_id]) {
        usernameCache[window.sessionStorage.user_id] = true;
        return $http({
          method: 'POST',
          url: '/' + window.sessionStorage.code,
          data: {
            user_id: parseInt(window.sessionStorage.user_id)
          }
        });
      }
    };

    console.log('window.sessionStorage =', window.sessionStorage);
    $urlRouterProvider.otherwise(function($injector) {
      var state = $injector.get('$state');
      if (!window.sessionStorage.username || window.sessionStorage.username === "undefined") {
        state.go('home');
        // state.go('404');
      } else {
        state.go('event.allDishes');
      }
    });

    $stateProvider
      .state('home', {
        url: '/home',
        views: {
          'navbar': {
            templateUrl: 'components/navbar/navbar.html',
            controller: 'NavbarCtrl',
            controllerAs: 'navbar'
          },
          '@': {
            templateUrl: 'app/home/home.html',
            controller: 'HomeCtrl',
            controllerAs: 'home'
          }
        }
      })
      .state('oAuth', {
        url: '/oAuth',
        views: {
          'navbar': {
            templateUrl: 'components/navbar/navbar.html',
            controller: 'NavbarCtrl',
            controllerAs: 'navbar'
          },
          '@': {
            templateUrl: 'app/oAuth/oAuth.html',
            controller: 'OAuthCtrl',
            controllerAs: 'oAuth'
          }
        }
      })
      .state('dashboard', {
        url: '/dashboard',
        views: {
          'navbar': {
            templateUrl: 'components/navbar/navbar.html',
            controller: 'NavbarCtrl',
            controllerAs: 'navbar'
          },
          '@': {
            templateUrl: 'app/dashboard/dashboard.html',
            controller: 'DashboardCtrl',
            controllerAs: 'dashboard'
          }
        }
      })
      .state('404', {
        url: '/404',
        views: {
          'navbar': {
            templateUrl: 'components/navbar/navbar.html',
            controller: 'NavbarCtrl',
            controllerAs: 'navbar'
          },
          '@': {
            templateUrl: '404.html'
          }
        }
      })
      .state('event', {
        url: '/:id',
        views: {
          'navbar': {
            templateUrl: 'components/navbar/navbar.html',
            controller: 'NavbarCtrl',
            controllerAs: 'navbar'
          }

        }
      })
      .state('event.addDish', {
        url: '/addDish',
        views: {
          '@': {
            templateUrl: 'app/addDish/addDish.html',
            controller: 'AddDishCtrl',
            controllerAs: 'addDish'
          }
        },
        resolve: {
          getEventInfo: ['$http', getInfoOnRefresh]
        }
      })
      .state('event.allDishes', {
        url: '/allDishes',
        views: {
          '@': {
            templateUrl: 'app/allDishes/allDishes.html',
            controller: 'AllDishesCtrl',
            controllerAs: 'allDishes',
          }
        },
        resolve: {
          getEventInfo: ['$http', getInfoOnRefresh]
        }
      })
      .state('event.guestBill', {
        url: '/guestBill',
        views: {
          '@': {
            templateUrl: 'app/guestBill/guestBill.html',
            controller: 'GuestBillCtrl',
            controllerAs: 'guestBill'
          }
        },
        resolve: {
          getEventInfo: ['$http', getInfoOnRefresh]
        }
      })
      .state('event.hostReceipt', {
        url: '/hostReceipt',
        views: {
          '@': {
            templateUrl: 'app/hostReceipt/hostReceipt.html',
            controller: 'HostReceipt',
            controllerAs: 'hostReceipt'
          }
        },
        resolve: {}

      })
      .state('event.hostBill', {
        url: '/hostBill',
        views: {
          '@': {
            templateUrl: 'app/hostBill/hostBill.html',
            controller: 'HostBillCtrl',
            controllerAs: 'hostBill'
          }
        },
        resolve: {
          getEventInfo: ['$http', getInfoOnRefresh]
        }
      })
      .state('event.loading', {
        url: '/loading',
        views: {
          '@': {
            templateUrl: 'app/loading/loading.html',
            controller: 'LoadingCtrl',
            controllerAs: 'loading'
          }
        },
        resolve: {

        }
      });
  }
})();

// To use sockets on client, inject 'socket' (and add to params) in all controllers that will use sockets (all except home)

// Adds sockets to the digest cycle the angular way:

(function() {
  'use strict';

  angular.module('Piecemeal')

  .factory('socketFactory', socketFactory);

  socketFactory.$inject = ['$rootScope', '$window'];

  function socketFactory($rootScope, $window) {

    var socket;
    var services = {
      on: on,
      emit: emit,
      init: init
    };

    return services;

    function init() {
      var ioRoom = $window.location.origin + '/' + $window.sessionStorage.code;
      $window.socket = io(ioRoom);
    }

    function on(eventName, callback) {
      // console.log("socketFactory.on exists!");
      $window.socket.on(eventName, function() {
        var args = arguments;
        $rootScope.$apply(function() {
          callback.apply($window.socket, args);
        });
      });
    }

    function emit(eventName, data, callback) {
      $window.socket.emit(eventName, data, function() {
        var args = arguments;
        $rootScope.$apply(function() {
          if (callback) {
            callback.apply($window.socket, args);
          }
        });
      });
    }
  }

})();


// NON-JOHN PAPA STYLE, BUT FUNCTIONAL:
// Note: requires adding 'socket' to Piecemeal's dependencies
// Keeping this temporarily in case it makes testing complicated bugs easier

// angular.module('socket', [])

// .factory('socket', function ($rootScope, $window) {
//   // Connect to sockets.io with unique ioRoom ID
//   var ioRoom = $window.location.href;
//   var socket = io(ioRoom);
//   console.log('Joining ioRoom: ', ioRoom);

// return {
//   on: function (eventName, callback) {
//     socket.on(eventName, function () {
//       var args = arguments;
//       $rootScope.$apply(function () {
//         callback.apply(socket, args);
//       });
//     });
//   },
//   emit: function (eventName, data, callback) {
//     socket.emit(eventName, data, function () {
//       var args = arguments;
//       $rootScope.$apply(function () {
//         if (callback) {
//           callback.apply(socket, args);
//         }
//       });
//     });
//   }
// };

// });

// Sockets: client emits 'shareDish' to server, which broadcasts 'dishShared' to clients. hear it here and update data on service
// then, if the controllers have direct binding to this data, no further action is needed

(function() {
  'use strict';

  angular.module('Piecemeal')
    .factory('appFactory', appFactory);

  appFactory.$inject = ['socketFactory', '$rootScope', '$window', '$location'];

  function appFactory(socketFactory, $rootScope, $window, $location) {

    var services = {
      initListeners: initListeners,
      addDish: addDish,
      shareDish: shareDish,
      unshareDish: unshareDish,
      getSessStorage: getSessStorage,
      arrayToSentence: arrayToSentence,
      getUsersByDish: getUsersByDish,
      getDishIndivCost: getDishIndivCost,
      goToAllDishes: goToAllDishes,
      goToGuestBill: goToGuestBill,
      goToAddDish: goToAddDish,
      goToHostBill: goToHostBill,
      goToHome: goToHome,
      copySessData: copySessData,
      logout: logout
        // data: data
        // data.billData: billData
    };

    return services;

    function getSessStorage(prop) {
      if (prop === "code") {
        return $window.sessionStorage.code;
      }
      if (prop === "event_id") {
        return parseInt($window.sessionStorage.event_id);
      }
      if (prop === "isHost") {
        return ($window.sessionStorage.isHost === "false") ? false : true;
      }
      if (prop === "user_id") {
        return parseInt($window.sessionStorage.user_id);
      }
      if (prop === "username") {
        return $window.sessionStorage.username;
      }
    }

    function copySessData(self) {
      for (var prop in $window.sessionStorage) {
        self[prop] = getSessStorage(prop);
      }
    }

    function getDishIndivCost(dish) {
      return dish.cost / dish.users.length;
    }

    function arrayToSentence(array) {
      array = _.map(array, _.capitalize);
      if (array.length === 1) {
        return array[0];
      }
      if (array.length === 2) {
        return array.join(" and ");
      } else {
        var last = array.pop();
        return array.join(", ") + " and " + last;
      }
    }

    function goToAddDish() {
      $location.path('/' + services.getSessStorage('code') + '/addDish');
    }

    function goToAllDishes() {
      $location.path('/' + services.getSessStorage('code') + '/allDishes');
    }

    function goToGuestBill() {
      $location.path('/' + services.getSessStorage('code') + '/guestBill');
    }

    function goToHostBill() {
      $location.path('/' + services.getSessStorage('code') + '/hostBill');
    }

    function goToHome() {
      $location.path('/home');
    }

    function addDish(dish) {
      for (var i = 0; i < services.data.users.length; i++) {
        if (services.data.users[i].id === dish.user_id) {
          services.data.users[i].dishes.push(dish);
        }
      }
      services.data.dishes.push(dish);
    }

    function shareDish(dish_id, user_id) {
      var dishObj;
      services.data.dishes.forEach(function(dish) {
        if (dish.dish_id === dish_id) {
          dish.users.push(user_id);
          dishObj = dish;
        }
      });
      services.data.users.forEach(function(user) {
        if (user.id === user_id) {
          user.dishes.push(dishObj);
        }
      });
    }

    function unshareDish(dish_id, user_id) {
      services.data.dishes.forEach(function(dish, dishIndex) {
        if (dish.dish_id === dish_id) {
          dish.users.splice(dish.users.indexOf(user_id), 1);
          if (dish.users.length === 0) {
            services.data.dishes.splice(dishIndex, 1);
          }
        }
      });
      services.data.users.forEach(function(user) {
        if (user.id === user_id) {
          var dishIndex = user.dishes.reduce(function(dishIndex, dish, index) {
            if (dishIndex || dishIndex === 0) {
              return dishIndex;
            }
            if (dish.dish_id === dish_id) {
              return index;
            }
          }, false);
          user.dishes.splice(dishIndex, 1);
        }
      });
    }

    function logout() {
      for (var prop in $window.sessionStorage) {
        delete $window.sessionStorage[prop];
      }
      goToHome();
      $window.location.reload();
    }

    function getUsersByDish(dish, users) {
      return arrayToSentence(
        _(dish.users).map(function(id) {
          return users[_.findIndex(users, {
            'id': id
          })].username;
        }).value());
      //   return {
      //     username: users[index].username,
      //     user_id: parseInt(users[index].id),
      //     isHost: users[index].host
      //   };
    }

    function initListeners() {
      socketFactory.on('joined', function(data) {
        console.log("Heard 'joined' in appFactory.data:", data);
        services.data = data;
        $rootScope.$broadcast('joined');
      });

      socketFactory.on('newParticipant', function(userObj) {
        console.log("Heard 'newParticipant' in appFactory:", userObj);
        services.data.users.push(userObj);
      });

      socketFactory.on('dishAdded', function(dish) {
        console.log("Heard 'dishAdded' in appFactory.data:", dish);
        // data format: {cost: 3, name: "rice", user_id: "29319", event_id: 1, users: ["29319"]}
        addDish(dish);
      });

      socketFactory.on('dishShared', function(data) {
        console.log("Heard 'dishShared' in appFactory.data:", data);
        // data format: {user_id: 24, dish_id: 14}
        shareDish(data.dish_id, data.user_id);
      });

      socketFactory.on('dishUnshared', function(data) {
        console.log("Heard 'dishUnshared' in appFactory.data:", data);
        unshareDish(data.dish_id, data.user_id);
      });

      socketFactory.on('billsSentToGuests', function(data) {
        console.log("Heard 'billsSentToGuests' in appFactory.data:", data);
        services.data.billData = data;
        $rootScope.$broadcast('billsSentToGuests');
        // $rootScope.$broadcast('billsSentToGuests', data);
        // $rootScope.$apply();
      });

    }
  }
})();

(function() {
  'use strict';

  angular.module('Piecemeal')
    .controller('AddDishCtrl', AddDishCtrl);

  AddDishCtrl.$inject = ['socketFactory', 'addDishFactory', 'appFactory', '$scope'];

  function AddDishCtrl(socketFactory, addDishFactory, appFactory, $scope) {

    var self = this;
    appFactory.copySessData(self);

    // load data on page refresh
    $scope.$on('joined', function() {
      self.data = appFactory.data;
      console.log("Joined the Add Dish room.");
      self.calcUserCurrentTotal(self.data);
    });

    // load data when *not* on page refresh
    self.data = appFactory.data;

    self.calcUserCurrentTotal = function(data) {
      return (!data) ? 0 : addDishFactory.calculateRunningTotal(data);
    };

    if (!appFactory.data) {
      socketFactory.init();
      appFactory.initListeners();
    } else {
      self.calcUserCurrentTotal(self.data);
    }

    self.addDish = function(name, cost) {
      var dish = {
        cost: Number(cost),
        name: name,
        user_id: self.user_id,
        event_id: self.event_id,
        users: [self.user_id]
      };
      socketFactory.emit('addDish', dish);
      // self.userTotal += cost;
      self.amount = '';
      self.dishName = '';
      self.addedDish = true;
      self.previousDish = name;
    };

    self.logout = appFactory.logout;

  }

})();

(function() {
  'use strict';

  angular.module('Piecemeal')
    .factory('addDishFactory', addDishFactory);

  addDishFactory.$inject = ['appFactory'];

  function addDishFactory(appFactory) {
    var services = {
      calculateRunningTotal: calculateRunningTotal
    };

    return services;

    function calculateRunningTotal(data) {
      // Initialize to 0 if appFactory.data hasn't loaded yet
      return (!data) ? 0 : _.filter(data.dishes, function(obj, key) {
          return _.contains(obj.users, appFactory.getSessStorage('user_id'));
        })
        .reduce(function(acc, current) {
          return acc + (Number(current.cost) / current.users.length);
        }, 0);
    }
  }
})();

(function() {
  'use strict';

  angular.module('Piecemeal')
    .controller('AllDishesCtrl', AllDishesCtrl);

  AllDishesCtrl.$inject = ['socketFactory', 'appFactory', '$scope'];

  function AllDishesCtrl(socketFactory, appFactory, $scope) {
    var self = this;
    appFactory.copySessData(self);

    // load data on page refresh
    $scope.$on('joined', function() {
      self.data = appFactory.data;
      console.log("Joined the All Dishes room.");
    });

    // load data when *not* on page refresh
    self.data = appFactory.data;

    if (!appFactory.data) {
      socketFactory.init();
      appFactory.initListeners();
    }

    self.getUsersByDish = appFactory.getUsersByDish;

    self.isOnDish = function(dishUsers, user_id) {
      var result = false;
      return dishUsers.reduce(function(isOnDish, id) {
        if (id.toString() === user_id.toString()) {
          return true;
        }
        return isOnDish;
      }, false);
    };

    self.shareDish = function(dish_id, user_id, users) {
      if (!self.isOnDish(users, user_id)) {
        socketFactory.emit('shareDish', {
          dish_id: dish_id,
          user_id: user_id
        });
        appFactory.shareDish(dish_id, user_id);
      }
    };

    self.unshareDish = function(dish_id, user_id, users) {
      if (self.isOnDish(users, user_id)) {
        socketFactory.emit('unshareDish', {
          dish_id: dish_id,
          user_id: user_id
        });
        appFactory.unshareDish(dish_id, user_id);
      }
    };

    self.logout = appFactory.logout;
  }
})();

(function() {
  'use strict';

  angular.module('Piecemeal')
    .factory('allDishesFactory', allDishesFactory);

  allDishesFactory.$inject = ['$http', '$window'];

  function allDishesFactory($http, $window) {

    var services = {};

    return services;

  }
})();

(function() {
  'use strict';

  angular.module('Piecemeal')
  .controller('DashboardCtrl', DashboardCtrl);

  DashboardCtrl.$inject = ['dashboardFactory', '$window', '$location', 'appFactory'];

  function DashboardCtrl(dashboardFactory, $window, $location, appFactory) {
    var self = this;

    self.getUsers = function(users) {
      return appFactory.arrayToSentence(users.map(function(userObj) {
        return userObj.username;
      }));
    };

    self.getDishNames = function(bill) {
      return appFactory.arrayToSentence(bill.dishes.map(function(dish) {
        return dish.name;
      }));
    }

    // dashboardFactory.getBills()
    // .then(function(data) {
    //   self.allBills = data.data;
    //   console.log(data);
    // })

    dashboardFactory.createEvent()
    .then(function(data) {
      data = data.data;
      _.assign($window.sessionStorage, {
        username: data.username,
        code: data.code,
        isHost: true,
        user_id: data.user_id,
        event_id: data.event_id
      });
      $location.path('/' + data.code + '/allDishes');
    })
    .catch(function(err) {
      console.log("Error in creating event.");
    });
  }

})();

(function() {
  'use strict';

  angular.module('Piecemeal')
  .factory('dashboardFactory', dashboardFactory);

  dashboardFactory.$inject = ['$http'];

  function dashboardFactory($http) {
    var services = {
      getBills: getBills,
      createEvent: createEvent
    };

    return services;

    function createEvent() {
      return $http({
        method: 'GET',
        url: '/auth/createEvent'
      })

    }

    function getBills() {
      return $http({
        method: 'GET',
        url: '/auth/getBills'
      })
    }
  }

})();

(function() {
  'use strict';

  angular.module('Piecemeal')
    .controller('GuestBillCtrl', GuestBillCtrl);

  GuestBillCtrl.$inject = ['$scope', 'appFactory', 'addDishFactory', 'socketFactory'];

  function GuestBillCtrl($scope, appFactory, addDishFactory, socketFactory) {
    var self = this;
    appFactory.copySessData(self);

    // load data on page refresh
    $scope.$on('joined', function() {
      self.data = appFactory.data;
      self.data.billData = appFactory.data.billData; // check later
      self.getDishIndivCost = appFactory.getDishIndivCost;
      self.venmoUsername = appFactory.data.venmoUsername;
    });

    // load data when *not* on page refresh
    self.data = appFactory.data;

    if (!appFactory.data) {
      socketFactory.init();
      appFactory.initListeners();
    } else {
      self.getDishIndivCost = appFactory.getDishIndivCost;
      self.venmoUsername = appFactory.data.venmoUsername;
    }

    $scope.$on('billsSentToGuests', function() {
      self.data.billData = appFactory.data.billData;
    });

    // self.getGuestDishes = _.memoize(function(user_id, dishes) {
    //   return _.filter(dishes, function(obj, key) {
    //     return _.contains(obj.users, user_id);
    //   });
    // });
    self.getGuestDishes = function(user_id, dishes) {
      return (!self.data) ? [] : _.filter(dishes, function(obj, key) {
        return _.contains(obj.users, user_id);
      });
    };

    self.getGuestTotal = function(data) {
      return addDishFactory.calculateRunningTotal(data);
    };

    self.getGrandTotal = function(dishes, billData) {
      return (!self.data) ? 0 : _.sum(_.pluck(dishes, 'cost')) + billData.tipPercent + billData.taxPercent;
    };

    self.getOtherUsersByUsername = function(dish, users, user_id) {
      return appFactory.arrayToSentence(
        _(dish.users).filter(function(id) {
          return id !== user_id;
        })
        .map(function(id) {
          return users[_.findIndex(users, {
            'id': id
          })].username;
        }).value()
      );
    };

    self.getGuestTax = function() {
      return (!self.data) ? 0 : self.data.billData.taxPercent * self.getGuestTotal(self.data) * 0.01;
    };

    self.getGuestTip = function() {
      return (!self.data) ? 0 : self.data.billData.tipPercent * self.getGuestTotal(self.data) * 0.01;
    };

    self.getGuestGrandTotal = function() {
      return (!self.data) ? 0 : self.getGuestTotal(self.data) + (self.data.billData.taxPercent * self.getGuestTotal(self.data) * 0.01) + (self.data.billData.tipPercent * self.getGuestTotal(self.data) * 0.01);
    };

    self.logout = appFactory.logout;

  }
})();

(function() {
  'use strict';

  angular.module('Piecemeal')
    .factory('guestBillFactory', guestBillFactory);

  guestBillFactory.$inject = [];

  function guestBillFactory() {
    var services = {
      showGuestBill: showGuestBill
    };

    return services;

    function showGuestBill() {

    }
  }

})();

(function() {
  'use strict';

  angular.module('Piecemeal')
    .controller('HomeCtrl', HomeCtrl);

  HomeCtrl.$inject = ['$window'];

  function HomeCtrl($window) {

    var self = this;

    self.setSessionUser = function(code) {
      _.assign($window.sessionStorage, {
        code: code.toLowerCase(),
        isHost: false
      });
    };

  }
})();

(function() {
  'use strict';

  angular.module('Piecemeal')
    .factory('homeFactory', homeFactory);

  homeFactory.$inject = ['$http'];

  function homeFactory($http) {
    var services = {
    };

    return services;
  }

})();

(function() {
  'use strict';

  angular.module('Piecemeal')
    .controller('HostBillCtrl', HostBillCtrl);

  HostBillCtrl.$inject = ['appFactory', 'socketFactory', '$scope'];

  function HostBillCtrl(appFactory, socketFactory, $scope) {
    var self = this;

    appFactory.copySessData(self);

    // load data on page refresh
    $scope.$on('joined', function() {
      self.data = appFactory.data;
      self.getDishIndivCost = appFactory.getDishIndivCost;
    });

    // load data when *not* on page refresh
    self.data = appFactory.data;

    if (!appFactory.data) {
      socketFactory.init();
      appFactory.initListeners();
    } else {
      self.billsSent = true;
    }

    self.getDishIndivCost = appFactory.getDishIndivCost;
    self.getUsersByDish = appFactory.getUsersByDish;

    self.tipType = 'percent';
    self.taxType = 'percent';

    self.repopulateTip = function(billData) {
      return (!billData) ? 0 : billData.tipPercent;
    };

    self.repopulateTax = function(billData) {
      return (!billData) ? 0 : billData.taxPercent;
    };

    self.getTip = function() {
      if (!self.data) {
        return 0;
      }
      if (self.tipType === 'dollar') {
        return self.tip;
      } else if (self.tipType === 'percent') {
        return self.tip * 0.01 * self.getSubTotal(self.data.dishes);
      }
    };

    // TODO: To be refactored later
    self.getTipPercent = function() {
      if (!self.data) {
        return 0;
      }
      if (self.tipType === 'dollar') {
        var num = self.tip / self.getSubTotal(self.data.dishes) * 100;
        return Math.round(num * 100) / 100; // round to 2 decimal places
      } else if (self.tipType === 'percent') {
        return self.tip;
      }
    };

    self.getTax = function() {
      if (!self.data) {
        return 0;
      }
      if (self.taxType === 'dollar') {
        return self.tax;
      } else if (self.taxType === 'percent') {
        return self.tax * 0.01 * self.getSubTotal(self.data.dishes);
      }
    };
    // TODO: To be refactored later
    self.getTaxPercent = function() {
      if (!self.data) {
        return 0;
      }
      if (self.taxType === 'dollar') {
        var num = self.tax / self.getSubTotal(self.data.dishes) * 100;
        return Math.round(num * 100) / 100; // round to 2 decimal places
      } else if (self.taxType === 'percent') {
        return self.tax;
      }
    };

    self.getSubTotal = function(dishes) {
      return _.sum(_.pluck(dishes, 'cost'));
    };

    self.getGrandTotal = function() {
      return self.getSubTotal(self.data.dishes) + self.getTip() + self.getTax();
    };

    self.sendBillsToGuests = function() {
      socketFactory.emit('sendBillToGuests', {
        event_id: self.event_id,
        code: self.code,
        hostUsername: self.username,
        host_id: self.user_id,
        subTotal: self.getSubTotal(self.data.dishes),
        taxPercent: self.getTaxPercent(),
        tipPercent: self.getTipPercent(),
        grandTotal: self.getGrandTotal()
      });
      self.billsSent = true;
    };

    self.logout = appFactory.logout;
  }
})();

(function() {
  'use strict';

  angular.module('Piecemeal')
    .factory('hostBillFactory', hostBillFactory);

  hostBillFactory.$inject = [];

  function hostBillFactory() {
    var services = {
      showHostBill: showHostBill
    };

    return services;

    function showHostBill() {

    }
  }

})();

(function() {
  'use strict';

  angular.module('Piecemeal')
    .controller('HostReceiptCtrl', HostReceiptCtrl);

  HostReceiptCtrl.$inject = ['$scope'];

  function HostReceiptCtrl($scope) {
    var self = this;

    self.test = "test"; //for spec tests, remove later

  }

})();

(function() {
  'use strict';

  angular.module('Piecemeal')
    .factory('hostReceiptFactory', hostReceiptFactory);

  hostReceiptFactory.$inject = [];

  function hostReceiptFactory() {
    var services = {
      showHostReceipt: showHostReceipt
    };

    return services;

    function showHostReceipt() {

    }
  }

})();

(function() {
  'use strict';

  angular.module('Piecemeal')
    .controller('LoadingCtrl', LoadingCtrl);

  LoadingCtrl.$inject = ['$location', '$window', 'loadingFactory', 'appFactory', '$timeout'];

  function LoadingCtrl($location, $window, loadingFactory, appFactory, $timeout) {
    var self = this;

    if (!$window.sessionStorage.getItem('code')) {
      var path = $location.path().split('/');
      $window.sessionStorage.setItem('code', path[path.length-2]);
    }

    self.setSessionUser = function(username) {
      loadingFactory.sendSessionUser(
          _.assign($window.sessionStorage, {
            isHost: false,
            username: username
          }))
        .then(function(userInfo) {
          _.assign($window.sessionStorage, {
            user_id: userInfo.user_id,
            event_id: userInfo.event_id
          });
          self.isSent = true;
          $location.path('/' + $window.sessionStorage.code + '/allDishes');
          // $timeout(function() {
          //   window.location.hash = "#/" + code + "/allDishes";
          // }, 1000);
        })
        .catch(function(err) {
          console.log("Error: Could not send session user info.");
          console.error(err);
          self.isError = true;
          $timeout(function() {
            appFactory.logout();
          }, 2000);
        });
    };
  }
})();

(function() {
  'use strict';

  angular.module('Piecemeal')
    .directive('loading', loading);

  function loading() {
    var directive = {
      link: link
    };

    return directive;

    function link(scope, elem, attrs) {
      var opts = {
        lines: 13,
        length: 28,
        width: 10,
        radius: 42,
        scale: 0.25,
        corners: 1,
        color: '#000',
        opacity: 0.2,
        rotate: 0,
        direction: 1,
        speed: 1.8,
        trail: 61,
        fps: 20,
        zIndex: 2e9,
        className: 'spinner',
        top: '0%',
        left: '0%',
        shadow: false,
        hwaccel: false,
        position: 'relative'
      };

      var spinner = new Spinner(opts).spin();

      elem.replaceWith(spinner.el);

      elem.on('$destroy', function() {
        spinner.stop();
      });
    }
  }

})();

(function() {
  'use strict';

  angular.module('Piecemeal')
    .factory('loadingFactory', loadingFactory);

  loadingFactory.$inject = ['$http'];

  function loadingFactory($http) {
    var services = {
      sendSessionUser: sendSessionUser
    };

    return services;

    function sendSessionUser(username) {
      return $http({
          method: 'POST',
          url: '/newUser',
          data: username
        })
        .then(function(res) {
          return res.data;
        })
        .catch(function(err) {
          console.log("Could not send username to server.");
        });
    }
  }

})();

(function() {
  'use strict';

  angular.module('Piecemeal')
  .controller('OAuthCtrl', OAuthCtrl);

  OAuthCtrl.$inject = ['oAuthFactory', '$window', '$location'];


  function OAuthCtrl(oAuthFactory, $window, $location) {
    var self = this;

    self.venmoAuth = function () {
      return oAuthFactory.venmoLogin();
    };

    // $window.sessionStorage should have: username, user_id, event code, event_id, and isHost
    self.setSessionUser = function(username, isHost, code) {
      oAuthFactory.createEvent({
          username: username
        })
        .then(function(data) {
          _.assign($window.sessionStorage, {
            username: username,
            code: data.code,
            isHost: true,
            user_id: data.user_id,
            event_id: data.event_id
          });
          $location.path('/' + data.code + '/allDishes');
        })
        .catch(function(err) {
          console.log("Error in creating event.");
        });
    };
    
  }

})();

(function() {
  'use strict';

  angular.module('Piecemeal')
  .factory('oAuthFactory', oAuthFactory);

  oAuthFactory.$inject = ['$http'];

  function oAuthFactory($http) {
    var services = {
      createEvent: createEvent
    };

    return services;

    function createEvent(userObj) {
      return $http({
          method: 'POST',
          url: '/createEvent',
          data: userObj
        })
        .then(function(res) {
          return res.data;
        });
    }
  }

})();

(function() {
  'use strict';

  angular.module('Piecemeal')
  .controller('NavbarCtrl', NavbarCtrl);

  NavbarCtrl.$inject = ['appFactory'];

  function NavbarCtrl(appFactory) {
    var self = this;
    self.logout = appFactory.logout;
    self.goToAllDishes = appFactory.goToAllDishes;
    self.goToGuestBill = appFactory.goToGuestBill;
    self.goToAddDish = appFactory.goToAddDish;
    self.goToHostBill = appFactory.goToHostBill;

  }

})();
